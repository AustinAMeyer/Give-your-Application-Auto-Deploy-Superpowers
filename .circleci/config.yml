version: 2.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ./frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd ./backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd ./frontend
            npm install
            npm install oauth-sign
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd ./backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
            cd ./frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end scan
          command: |
            cd ./backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo -e "[web]\n" > ./.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-backend" \
            --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: "python:3.7-alpine3.11"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["db:ea:3b:41:c5:b3:48:33:e1:1f:11:98:ae:1d:d9:24"]
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
      - run:
          name: Configure server
          command: |
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ./.circleci/ansible/inventory.txt ./.circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure   
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: migration
          command: |
            cd ./backend
            npm install
      - run:
          name: Run migrations
          command: |
            cd ./backend 
            touch .env

            echo ENVIROMENT=$ENVIROMENT >> ./.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ./.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ./.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ./.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ./.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ./.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ./.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ./.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ./.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ./.env

            touch migrationStatus.txt
            npm run migrations >> migrationStatus.txt
            
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ./backend/migrationStatus.txt
            then
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
            --request PUT \
            --data "1" https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID}
            else
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
            --request PUT \
            --data "0" https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID}
            fi
    # Here's where you will add some code to rollback on failure    

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar 
            yum -y install gzip
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=`cat ./.circleci/ansible/inventory.txt`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd ./frontend
            npm install
            npm run build
#aws s3 cp ./dist s3://udapeople-frontend-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
#Uncomment the ^^^^ once I am ready for testing the next stage
      # Here's where you will add some code to rollback on failure   
      # Need to grab the URL from the s3 bucket once I am on the final build
  deploy-backend:
    docker:
      - image: "python:3.7-alpine3.11"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["db:ea:3b:41:c5:b3:48:33:e1:1f:11:98:ae:1d:d9:24"]
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Set Enviroment variables 
          command: |
            cd ./backend 
            touch .env

            echo ENVIROMENT=$ENVIROMENT >> ./.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ./.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ./.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ./.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ./.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ./.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ./.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ./.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ./.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ./.env

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            apk add --update curl
            apk add --update openssh-client
      - run:
          name: Deploy backend
          command: |
            cd ./.circleci/ansible
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      
  smoke-test:
    docker:
      - image: "python:3.7-alpine3.11"
    steps:
      - checkout
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar
            apk add --update gzip
            apk add --update curl
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=`cat ./.circleci/ansible/inventory.txt`
      - run:
          name: Backend smoke test.
          command: |
            curl -s "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-frontend-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure      

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]